// cmd_test.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include "libsenc.h"
#include <iostream>
#include "openssl/rand.h"
#include <time.h>
// #include "base64.h"
#include "openssl/sm3.h"
//#include <vld.h>

// #include "openssl/sm4.h"

using namespace std;

unsigned char test2dec[16]={0x4F, 0xAF, 0xC9, 0x39, 0x55, 0x64, 0x2C, 0x00, 0x07, 0xDB, 0xC7, 0xD4, 0xC0, 0xDB, 0xB3, 0x41};

unsigned char test2plain[16]={0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21, 0x2B, 0x2B, 0x2B, 0x2B};

unsigned char gplain1[16]={
	0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38
};

unsigned char gcipher1[16]={
	0x2b, 0x7c, 0x77, 0xc7, 0xda, 0xb2, 0x0b, 0x7f, 0xcc, 0xa1, 0x46, 0x4b, 0xc5, 0xa2, 0xa6, 0xb3
};

unsigned char gpriv[1412]={
	0x00, 0x08, 0x00, 0x00, 0x7F, 0x21, 0xD7, 0xD3, 0x1C, 0xB3, 0x8E, 0x65, 0xCD, 0x60, 0x93, 0xC2, 0xDC, 0xDB, 0xA6, 0x64, 0xA2, 0x8C, 0xF3, 0x6A, 0x1B, 0xA1, 0x85, 0xEE, 0xB2, 0x7F, 0x5E, 0xD0, 0xF4, 0x67, 0x73, 0x40, 0xF0, 0xC6, 0xAC, 0xB4, 0x97, 0x6D, 0xED, 0x0B, 0x30, 0xFA, 0xB4, 0x98, 0x24, 0x3C, 0xE6, 0x9D, 0xF5, 0x59, 0x69, 0x1E, 0x34, 0x93, 0x85, 0xA7, 0xA4, 0xEA, 0x3C, 0xC9, 0x9F, 0x21, 0xD2, 0x45, 0x89, 0x07, 0x57, 0x01, 0xBE, 0x28, 0xBF, 0x10, 0x18, 0x63, 0xF7, 0x86, 0x73, 0xEB, 0x8B, 0x3D, 0xC1, 0x78, 0xF8, 0x91, 0x72, 0xD2, 0x4D, 0x11, 0x27, 0x4A, 0x85, 0xAE, 0x5E, 0x50, 0x9F, 0x02, 0x3B, 0xAE, 0x9A, 0x39, 0x7A, 0xE4, 0x4A, 0x6B, 0x1B, 0xAB, 0x53, 0x52, 0x5B, 0xD4, 0x67, 0xF9, 0x9B, 0xF7, 0x90, 0xAB, 0xA0, 0x6C, 0xCF, 0x55, 0xB2, 0x04, 0x79, 0xC5, 0xB4, 0xCB, 0xEE, 0x5B, 0x53, 0xAD, 0xC4, 0xAC, 0xEE, 0xF1, 0xCB, 0xF2, 0xD0, 0x36, 0x9D, 0xA0, 0xB3, 0x4A, 0x43, 0xA8, 0xE4, 0xE6, 0x32, 0x7F, 0x7C, 0x47, 0x78, 0x40, 0x6A, 0x8A, 0x7F, 0x3E, 0x7A, 0x9E, 0xB4, 0xA6, 0x25, 0x3D, 0x1B, 0x6A, 0x57, 0x99, 0x9E, 0x8F, 0xE5, 0x95, 0xE4, 0x5E, 0x61, 0x20, 0xEC, 0x3F, 0x96, 0xAE, 0xDF, 0x25, 0x61, 0x8C, 0xC8, 0xF1, 0x46, 0x4F, 0xCB, 0x85, 0xB3, 0xE5, 0x13, 0x21, 0x49, 0x3B, 0xE6, 0xF4, 0x99, 0x77, 0x94, 0xEF, 0x8F, 0xFB, 0xE0, 0xF5, 0x10, 0x5D, 0xCE, 0xE6, 0x9F, 0x5D, 0x0B, 0x21, 0xCB, 0xB4, 0xD5, 0xF9, 0x32, 0x00, 0xE7, 0xC1, 0xCC, 0x59, 0xA3, 0xED, 0xAF, 0x33, 0x8B, 0xAE, 0xED, 0x59, 0x2A, 0x9E, 0xCC, 0xF7, 0xA1, 0x70, 0x05, 0x35, 0xA9, 0xB1, 0x15, 0x77, 0xDE, 0xA6, 0x33, 0x29, 0x55, 0x5B, 0xC2, 0xE0, 0x22, 0xAB, 0x2D, 0x4C, 0x98, 0x52, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE, 0x18, 0xD5, 0xFE, 0x20, 0x2B, 0xC5, 0xF0, 0xFC, 0x87, 0xFD, 0x71, 0x13, 0x42, 0xC5, 0x4C, 0xCF, 0x4F, 0x80, 0x1B, 0xE0, 0xEE, 0x4E, 0x65, 0xCB, 0x9D, 0xE0, 0xA8, 0x31, 0x57, 0x6A, 0xC7, 0xB4, 0x05, 0x12, 0xAF, 0x87, 0x55, 0xF9, 0x5E, 0xF2, 0xAD, 0x61, 0xEF, 0x73, 0x04, 0x09, 0x41, 0x04, 0x2C, 0x84, 0x64, 0xFA, 0xE6, 0x19, 0x79, 0xB7, 0xB4, 0x94, 0xCC, 0x16, 0x77, 0xD0, 0xB1, 0xF4, 0xA7, 0x67, 0x18, 0xC9, 0x74, 0xA0, 0x67, 0xFD, 0x91, 0x74, 0xB2, 0xCD, 0x51, 0x13, 0x60, 0x8D, 0x94, 0xB2, 0x07, 0x64, 0x2F, 0xC5, 0xC9, 0x1B, 0x2C, 0x95, 0x6E, 0xC2, 0xA7, 0x5E, 0xCE, 0xCB, 0x2F, 0xD6, 0xF9, 0xF0, 0x5F, 0x60, 0x87, 0x16, 0x79, 0xD0, 0x25, 0x9F, 0x6E, 0x4E, 0x11, 0x6C, 0x78, 0x54, 0xD4, 0x51, 0xE6, 0x37, 0x7E, 0x5C, 0x32, 0x20, 0x44, 0x84, 0xBB, 0x2C, 0xCE, 0x2B, 0x1C, 0x1C, 0x1A, 0x8C, 0x80, 0xA7, 0x12, 0xF1, 0x87, 0xC5, 0xF5, 0xBE, 0x0B, 0xE9, 0x6E, 0x04, 0x36, 0x58, 0xAC, 0xEA, 0x90, 0xF1, 0xDE, 0x9A, 0xFD, 0x68, 0x27, 0x92, 0xEF, 0xD9, 0xA3, 0x6F, 0x2D, 0xD6, 0xF4, 0x08, 0x7E, 0x7A, 0x4E, 0xBD, 0xFA, 0x73, 0x98, 0x1E, 0x5C, 0x21, 0x8E, 0xF1, 0x8A, 0x36, 0x66, 0x29, 0xB4, 0xCD, 0x5C, 0x9B, 0x99, 0x0F, 0xFE, 0xE5, 0xE6, 0xE0, 0x38, 0xC6, 0xF7, 0x04, 0xF4, 0xE3, 0xB4, 0x1D, 0xB8, 0x93, 0xAC, 0xA4, 0x0C, 0x1D, 0xD0, 0x55, 0xA5, 0x28, 0xD4, 0xB4, 0x87, 0x0A, 0x67, 0x1C, 0x5A, 0xE3, 0xC0, 0x41, 0x3C, 0xFA, 0x41, 0x5C, 0xFA, 0xB3, 0xBA, 0xE9, 0x75, 0x28, 0xF0, 0xFC, 0x85, 0xEA, 0x98, 0xA2, 0x60, 0x70, 0x3F, 0xE8, 0x67, 0xAF, 0x24, 0xD5, 0xE5, 0xA9, 0xB0, 0x5F, 0x8B, 0xA1, 0xE0, 0x38, 0x98, 0xC3, 0x34, 0x31, 0x13, 0xC9, 0xD5, 0x55, 0x76, 0xC6, 0x8B, 0x56, 0x71, 0xA5, 0xBF, 0x07, 0x8C, 0xF1, 0xA4, 0xCA, 0x6F, 0xF5, 0xF2, 0x99, 0xF2, 0x07, 0x2D, 0x6F, 0xDA, 0xE5, 0x34, 0x51, 0x0A, 0x1C, 0x20, 0x2D, 0x5B, 0xC4, 0xFF, 0xC9, 0xFF, 0x68, 0xB2, 0x24, 0x32, 0x2C, 0x91, 0x5B, 0x60, 0x1E, 0x73, 0x0B, 0x41, 0x23, 0x87, 0x51, 0x26, 0x95, 0x87, 0x7C, 0xBB, 0xCF, 0xE7, 0x59, 0xA5, 0xF4, 0xF8, 0xAA, 0x68, 0xB4, 0xCF, 0x51, 0xC7, 0xB3, 0xE8, 0x77, 0x72, 0xB5, 0x24, 0xE9, 0x46, 0x46, 0xD4, 0xF3, 0x61, 0x20, 0x11, 0x1F, 0x63, 0x0D, 0xE7, 0x13, 0x06, 0x79, 0xE3, 0x12, 0xC5, 0x29, 0x53, 0x7A, 0xEF, 0x75, 0x53, 0xA0, 0x90, 0xDB, 0x6B, 0xE4, 0x92, 0x02, 0xEF, 0x29, 0x1F, 0x5C, 0x44, 0x67, 0x35, 0xE8, 0xB0, 0x9B, 0x6E, 0x94, 0x0D, 0x44, 0xD9, 0xF2, 0xD0, 0xED, 0x40, 0xD1, 0x1A, 0x1E, 0x45, 0x95, 0xA9, 0xE2, 0xA1, 0x36, 0xCC, 0x85, 0xD5, 0x7E, 0x04, 0x9B, 0x7A, 0x39, 0x3A, 0x32, 0xCE, 0xB8, 0x06, 0xB9, 0xD1, 0x96, 0xB5, 0x34, 0x11, 0xF8, 0x70, 0x2A, 0x98, 0xEE, 0xD8, 0xE6, 0x9A, 0xB1, 0xB6, 0x4A, 0x79, 0xC9, 0x64, 0x5E, 0x65, 0x10, 0x7B, 0x3E, 0xEF, 0x5F, 0x41, 0xB4, 0x84, 0xF2, 0x83, 0x78, 0xF8, 0x96, 0x5E, 0x33, 0x22, 0x8E, 0x95, 0xEC, 0xDF, 0x79, 0x4A, 0x47, 0x3F, 0x85, 0xDC, 0x42, 0x85, 0xD1, 0x06, 0x7D, 0x25, 0x9C, 0x11, 0x29, 0x92, 0x51, 0xCC, 0x6B, 0x13, 0x9B, 0x30, 0xF9, 0xC8, 0xF1, 0xE5, 0x55, 0x88, 0x4A, 0x0D, 0x66, 0xDD, 0xF7, 0x9B, 0x08, 0xC7, 0x2A, 0xD0, 0xB0, 0x96, 0x01, 0xF3, 0xBF, 0x80, 0xA1, 0x84, 0x5F, 0x58, 0xFF, 0xF6, 0xE3, 0x86, 0x26, 0x3D, 0x3A, 0xF7, 0x68, 0x95, 0x78, 0xB2, 0x07, 0x73, 0x41, 0x26, 0xD0, 0xDE, 0x2F, 0x4A, 0xFD, 0xEC, 0xD3, 0x5D, 0x6B, 0x91, 0xEF, 0x1C, 0xC3, 0xBD, 0xF0, 0x59, 0x5A, 0x7A, 0xF1, 0xFD, 0x97, 0x3E, 0x87, 0x4A, 0xB1, 0x20, 0x04, 0x8D, 0xE1, 0x3C, 0x5A, 0xA9, 0x7D, 0xA3, 0x3A, 0x30, 0x6D, 0x0D, 0x5F, 0x63, 0x9B, 0x57, 0x59, 0xBF, 0x40, 0xF5, 0x51, 0x75, 0x09, 0x3B, 0x88, 0x5B, 0x2E, 0x9C, 0xAE, 0x74, 0x5A, 0xA8, 0xD9, 0x93, 0xFA, 0x30, 0xB7, 0xEC, 0x14, 0xEE, 0xF8, 0x6E, 0xF8, 0xF1, 0xF7, 0x3D, 0xB9, 0x8B, 0xB1, 0xAE, 0x2B, 0x8D, 0x38, 0xA2, 0xCD, 0x80, 0xF7, 0x7C, 0x19, 0x59, 0x91, 0xDC, 0x5D, 0xBF, 0x66, 0x80, 0x40, 0xFF, 0xED, 0xB3, 0x28, 0x9A, 0xAA, 0x43, 0x5C, 0xA4, 0x8F, 0x9D, 0x7C, 0x50, 0xD7, 0x5E, 0xE7, 0x7F, 0x95, 0xAE, 0x13, 0xBC, 0x50, 0xC2, 0x6B, 0x61, 0x22, 0x99, 0x38, 0xCB, 0xE9, 0xC2, 0xED, 0x0D, 0x17, 0x11, 0xE2, 0xAB, 0x08, 0x83, 0xA6, 0xCD, 0x7A, 0xC2, 0x20, 0xCF, 0xB2, 0x6B, 0xFA, 0x29, 0xF4, 0xD9, 0x8C, 0x59, 0x0C, 0x80, 0x24, 0x46, 0x90, 0x83, 0x12, 0x16, 0xBC, 0x09, 0x21, 0xC2, 0x9F, 0x87, 0x0D, 0xD3, 0xEC, 0xD5, 0x0B, 0xCA, 0x24, 0xFD, 0x9D, 0xF6, 0xA0, 0xB1, 0x2D, 0xD5, 0x63, 0xB2, 0x58, 0x83, 0x3C, 0x26, 0xCD, 0xCB, 0x71, 0xE6, 0x26, 0xC0, 0x97, 0x10, 0xB2, 0x5E, 0xA4, 0x71, 0xC0, 0x6C, 0xA8, 0x93, 0xFE, 0xFD, 0x96, 0xDB, 0x5D, 0x48, 0x20, 0x73, 0xA7, 0xBC, 0x07, 0x01, 0x2F, 0x74, 0x22, 0xD3, 0x00, 0xBD, 0x40, 0x65, 0xC7, 0xA6, 0x51, 0xA8, 0xFD, 0xFE, 0x43, 0x7A, 0x63, 0xBF, 0x8A, 0xF2, 0x35, 0xB5, 0x4C, 0x4E, 0x7E, 0xCF, 0xD1, 0x79, 0x80, 0x5A, 0x6C, 0xBA, 0x44, 0x2C, 0x08, 0xFC, 0x68, 0xC2, 0xC3, 0x56, 0x99, 0x6B, 0x41, 0xB5, 0x41, 0xEE, 0xF3, 0x2E, 0x61, 0x53, 0x94, 0xC5, 0xF4, 0xE3, 0xF7, 0x67, 0x5C, 0x6C, 0x28, 0x53, 0x36, 0x23, 0x66, 0xE0, 0x59, 0x3A, 0x8F, 0xF0, 0x5F, 0x2D, 0x84, 0x8A, 0x5C, 0xBF, 0xB0, 0x6E, 0xD4, 0xD1, 0xAB, 0xC9, 0xC1, 0x76, 0x3E, 0x4C, 0xAC, 0x7D, 0xC8, 0x1E, 0x37, 0xD3, 0xDD, 0x43, 0xE5, 0x3E, 0x85, 0x17, 0x79, 0x43, 0xA8, 0x4D, 0x04, 0x0B, 0xB0, 0xA6, 0xF9, 0xA2, 0xCF, 0x01, 0xAB, 0xDA, 0x3C, 0x85, 0xC7, 0x94, 0x22, 0x58, 0x4F, 0x3C, 0x6C, 0x39, 0x37, 0x50, 0xEC, 0xF8, 0xE4, 0xF8, 0x91, 0xBE, 0x48, 0xCE, 0x69, 0x10, 0xEE, 0xFF, 0x8B, 0x28, 0x13, 0xCE, 0x44, 0xB3, 0xCC, 0x59, 0x4F, 0x40, 0x98, 0x7B, 0xD0, 0x2F, 0xC9, 0x37, 0x8C, 0xB0, 0x5E, 0x96, 0x50, 0x75, 0x5D, 0x29, 0x11, 0x02, 0xB0, 0x2D, 0xE2, 0x64, 0x89, 0x97, 0x72, 0x34, 0xB5, 0x8D, 0x85, 0xD9, 0xC4, 0x64, 0x73, 0x95, 0xB1, 0xBF, 0xDA, 0xB7
};

unsigned char gpub[512]={
	0x7F, 0x21, 0xD7, 0xD3, 0x1C, 0xB3, 0x8E, 0x65, 0xCD, 0x60, 0x93, 0xC2, 0xDC, 0xDB, 0xA6, 0x64, 0xA2, 0x8C, 0xF3, 0x6A, 0x1B, 0xA1, 0x85, 0xEE, 0xB2, 0x7F, 0x5E, 0xD0, 0xF4, 0x67, 0x73, 0x40, 0xF0, 0xC6, 0xAC, 0xB4, 0x97, 0x6D, 0xED, 0x0B, 0x30, 0xFA, 0xB4, 0x98, 0x24, 0x3C, 0xE6, 0x9D, 0xF5, 0x59, 0x69, 0x1E, 0x34, 0x93, 0x85, 0xA7, 0xA4, 0xEA, 0x3C, 0xC9, 0x9F, 0x21, 0xD2, 0x45, 0x89, 0x07, 0x57, 0x01, 0xBE, 0x28, 0xBF, 0x10, 0x18, 0x63, 0xF7, 0x86, 0x73, 0xEB, 0x8B, 0x3D, 0xC1, 0x78, 0xF8, 0x91, 0x72, 0xD2, 0x4D, 0x11, 0x27, 0x4A, 0x85, 0xAE, 0x5E, 0x50, 0x9F, 0x02, 0x3B, 0xAE, 0x9A, 0x39, 0x7A, 0xE4, 0x4A, 0x6B, 0x1B, 0xAB, 0x53, 0x52, 0x5B, 0xD4, 0x67, 0xF9, 0x9B, 0xF7, 0x90, 0xAB, 0xA0, 0x6C, 0xCF, 0x55, 0xB2, 0x04, 0x79, 0xC5, 0xB4, 0xCB, 0xEE, 0x5B, 0x53, 0xAD, 0xC4, 0xAC, 0xEE, 0xF1, 0xCB, 0xF2, 0xD0, 0x36, 0x9D, 0xA0, 0xB3, 0x4A, 0x43, 0xA8, 0xE4, 0xE6, 0x32, 0x7F, 0x7C, 0x47, 0x78, 0x40, 0x6A, 0x8A, 0x7F, 0x3E, 0x7A, 0x9E, 0xB4, 0xA6, 0x25, 0x3D, 0x1B, 0x6A, 0x57, 0x99, 0x9E, 0x8F, 0xE5, 0x95, 0xE4, 0x5E, 0x61, 0x20, 0xEC, 0x3F, 0x96, 0xAE, 0xDF, 0x25, 0x61, 0x8C, 0xC8, 0xF1, 0x46, 0x4F, 0xCB, 0x85, 0xB3, 0xE5, 0x13, 0x21, 0x49, 0x3B, 0xE6, 0xF4, 0x99, 0x77, 0x94, 0xEF, 0x8F, 0xFB, 0xE0, 0xF5, 0x10, 0x5D, 0xCE, 0xE6, 0x9F, 0x5D, 0x0B, 0x21, 0xCB, 0xB4, 0xD5, 0xF9, 0x32, 0x00, 0xE7, 0xC1, 0xCC, 0x59, 0xA3, 0xED, 0xAF, 0x33, 0x8B, 0xAE, 0xED, 0x59, 0x2A, 0x9E, 0xCC, 0xF7, 0xA1, 0x70, 0x05, 0x35, 0xA9, 0xB1, 0x15, 0x77, 0xDE, 0xA6, 0x33, 0x29, 0x55, 0x5B, 0xC2, 0xE0, 0x22, 0xAB, 0x2D, 0x4C, 0x98, 0x52, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

unsigned char gmac[16]={
	0x2C, 0x8D, 0x7E, 0x14, 0x6E, 0xD0, 0xC1, 0xED, 0x02, 0xBB, 0xE8, 0x6A, 0x61, 0xFF, 0x99, 0x27
};

unsigned char gsigned[256]={
	0x3F, 0x70, 0x80, 0xB9, 0x41, 0xC7, 0xCC, 0x72, 0xF6, 0x92, 0xBF, 0x6E, 0x3A, 0x74, 0x81, 0x89, 0x5C, 0xF3, 0xB3, 0xCD, 0xC7, 0x56, 0x05, 0xF0, 0x4E, 0xDA, 0xC0, 0xE4, 0x40, 0xAD, 0xDF, 0x0F, 0x52, 0x0F, 0x9F, 0x02, 0x15, 0x31, 0xDB, 0xD7, 0x21, 0xC6, 0xF3, 0x40, 0xDC, 0x0E, 0x51, 0x81, 0x64, 0x38, 0x8A, 0x55, 0xEB, 0x68, 0xC9, 0x53, 0x17, 0x79, 0xB9, 0xF0, 0x39, 0x37, 0xCB, 0x04, 0x8B, 0x87, 0x23, 0xED, 0xAD, 0x0F, 0x36, 0xDC, 0xDE, 0x84, 0xC9, 0xDF, 0xA8, 0xF9, 0xE9, 0x0E, 0x6B, 0xD5, 0x09, 0x2E, 0xFF, 0x67, 0x83, 0x6A, 0x7C, 0xF1, 0x57, 0x30, 0x15, 0xA1, 0x83, 0xEC, 0xF8, 0x23, 0xF9, 0x43, 0xF1, 0x8C, 0x92, 0x67, 0x5A, 0x7E, 0xCF, 0x44, 0xB4, 0x82, 0xA9, 0x1F, 0x6D, 0xA3, 0x12, 0xCA, 0x49, 0x10, 0x4F, 0x86, 0x33, 0x30, 0x75, 0xCD, 0x30, 0x1E, 0xE9, 0x6D, 0x43, 0x04, 0x51, 0xA4, 0x28, 0x28, 0x1A, 0x9C, 0xCB, 0x8D, 0x7D, 0xA0, 0x43, 0x37, 0x15, 0xE0, 0x07, 0xDA, 0x84, 0xF4, 0xE5, 0xE9, 0x60, 0x72, 0xAA, 0xB1, 0x15, 0xBB, 0xE4, 0xCF, 0x9A, 0x76, 0x0C, 0x62, 0xC4, 0x24, 0xB2, 0x9C, 0x36, 0xC8, 0xF2, 0xD0, 0x8A, 0x90, 0xEA, 0x4E, 0x57, 0xE6, 0x85, 0xC0, 0x6D, 0xAE, 0x6E, 0x53, 0xEB, 0x35, 0xB1, 0x72, 0x68, 0xAF, 0x84, 0xA7, 0xC5, 0x4A, 0xA4, 0x8E, 0xD0, 0x82, 0x7E, 0xED, 0x93, 0x2F, 0x0D, 0x85, 0x72, 0x12, 0x89, 0x21, 0x47, 0x7D, 0x88, 0x17, 0xCC, 0xCF, 0xC7, 0x6E, 0x29, 0xFF, 0x04, 0x74, 0x9F, 0xFF, 0x23, 0xCA, 0x52, 0x3E, 0xBF, 0xDD, 0x59, 0x84, 0xAC, 0x3F, 0x6E, 0xE5, 0xF1, 0x50, 0x3B, 0x6F, 0xFD, 0x35, 0x90, 0x93, 0x3C, 0x43, 0xDA, 0xCD, 0x0A, 0x07, 0x99, 0x7B, 0xC8, 0xCD, 0x3F, 0x2B, 0xA1, 0xDD, 0xA6, 0x9E
};
unsigned char giv[16]={
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x1A, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};

unsigned char grplain[16]={
	0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x2B, 0x2B, 0x21, 0x21, 0x21
};

unsigned char pincode[8]={0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77};


void RandGenerator(unsigned char* buf,int len){
	for(int i=0;i<len;i++){
		buf[i]=(unsigned char)(0xff*rand()/(RAND_MAX+1.0));
	}
	return;
}

// string Base64Encrypt( uint8_t *data, int data_len )
// {
// 	char *base64_data = NULL;
// 	string tmp;
// 	base64_data = base64_encode(data, data_len);
// 	if (base64_data != NULL) {
// 		tmp = base64_data;
// 	}
// 	return tmp;
// }
// 
// uint8_t *Base64Decrypt( string &str_base64, int *data_len)
// {
// 	return base64_decode(str_base64.c_str(), data_len);
// }

void toMatrix(string &r, int size, uint8_t* scrbuf){
	for(int i=0;i<size;i++){
		r+="0x";
		if((scrbuf[i]>>4)>9) r+=(scrbuf[i]>>4)+'a'-10;
		else r+=(scrbuf[i]>>4)+'0';

		if((scrbuf[i]&0xf)>9) r+=(scrbuf[i]&0xf)+'a'-10;
		else r+=(scrbuf[i]&0xf)+'0';
		r+=',';
	}
	r+="\r\n";
}


int _tmain(int argc, _TCHAR* argv[])
{
	SENCryptCardList dev_list;
	SENCHANDLE pDev=nullptr,pDevR;
	EncryptAttr ea={0};
	unsigned int uiReturn=0,hashlen;
	int i=0;
	unsigned char data[4096];
	unsigned char indata[4096];
	unsigned char indata2[4096];
	unsigned char privkey[4096];
	unsigned char pubkey[4096];
// 	unsigned char indata[256];
	unsigned char outdata[256];
	unsigned char d1[256];
	unsigned char d2[256];
	unsigned int retlength,datalen,d1l,d2l,privlen,publen,maclen,dd1,dd2;
	unsigned char priv[2048];
	unsigned char pub[512];
	unsigned char sm3mac[32];
	unsigned char hashdata[256]={0};

	unsigned char iv[16]={0};
	unsigned char mac[16];
	char a[1024]={0};
	string sendstr;
	int tar=0,len;
	/*unsigned*/ int vl,bl,ml;
	int loop=0;
	unsigned char *ppv,*ppb,*ppm,*p;
	srand((unsigned int)time(0));
	unsigned int ivl,ibl,iml;

	double st;
	double et;


	/*
	FILE *fp;
	fopen_s(&fp,"data.hex","rb");
	fread(indata,1,176,fp);
	fclose(fp);
	p=Base64Decrypt(data64,&len);
	memcpy(d1,p,len);
	p=Base64Decrypt(cipher64,&len);
	memcpy(d2,p,len);
	p=Base64Decrypt(plaintext64,&len);
	memcpy(indata2,p,len);

	i=memcmp(indata,d1,176);

	i=memcmp(indata,indata2,176);

*/






// 	RAND_bytes(d1,32);
// 	RandGenerator(d2,32);

	do{
		loop++;
		cout<<"loop: "<<dec<<loop<<endl;
// 		uiReturn=SENC_ResetByPort(17);
// 		if(uiReturn!=0){
// 			cout<<"Err Reset Port code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}
		RandGenerator(data,4096);
		datalen = rand()%2000+1;

		uiReturn=SENC_NewDevList(&dev_list);
		if(uiReturn!=0){
			cout<<"Err New List code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
			break;
		}
		for(int x=0;x<4;x++){
			uiReturn=SENC_ResetByPort(x+1,1);
			if(uiReturn!=0){
				cout<<"Err Get List code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
				break;
			}
			Sleep(3000);

		}

		uiReturn=SENC_GetDevList(&dev_list);
		if(uiReturn!=0){
			cout<<"Err Get List code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
			break;
		}


		unsigned char zeroset[16]={0};
		memset(zeroset,'0',16);

/*
		for(int i=0;i<8;i++){
			uiReturn=SENC_Open(dev_list.devs[i],&pDev);
			if(uiReturn!=0){
				cout<<"Err Open code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
				break;
			}

			uiReturn=SENC_KEY_DeleteKey(pDev,3,64);
			if(uiReturn!=0){
				cout<<"Err Open code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
				break;
			}

			uiReturn=SENC_KEY_ImportKey(pDev,3,64,zeroset,16);
			if(uiReturn!=0){
				cout<<"Err Open code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
				break;
			}

			uiReturn=SENC_Close(pDev);
			if(uiReturn!=0){
				cout<<"Err Open code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
				break;
			}


		}
*/

		

// 		for(tar=0;tar<dev_list.DevNums;tar++){
// 			if(dev_list.devs[tar]->Port_Num==2) break;
// 		}

		uint64_t timestamp =0;
		timestamp = time(0);

		uiReturn=SENC_Open(dev_list.devs[0],&pDev);
		if(uiReturn!=0){
			cout<<"Err Open code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
			break;
		}

// 		uiReturn=SENC_DataProtector_SetRTCTime(pDev,pincode,8,&timestamp);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_DataProtector_SetRTCTime code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}


// 		uiReturn=SENC_MC_SetStandby(pDev);
// 		if(uiReturn!=0){
// 			cout<<"Err Open code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}
// 
// 		uiReturn=SENC_DK_GetDonglesId(pDev,d1,&d1l);
// 		if(uiReturn!=0){
// 			cout<<"Err Open code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}
// 
// 		uiReturn=SENC_DongleVerify(pDev);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_DongleVerify code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}


// 		memset(d1,0x50,0x20);
// 		memset(d2,0x53,0x20);
// 
// 		uiReturn=SENC_Alternative_PBKDF2Encrypt(pDev,3,1,16,64,d1,0x20,d2,0x20,indata);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_Alternative_VerifyExternal code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}

// 		ea.AES_EncIdx=65;
// 		ea.AES_EncIdx=66;
// 		ea.AES_EncLength=1;
// 		ea.AES_EncMode=1;
		ea.RSA_PrikeyEncIdx=1;
		ea.RSA_PrikeyEncMode=3;
		ea.RSA_HashAlgorithm=1;
		ea.RSA_Mode=1;
		ea.RSA_PaddingMode=2;

		ea.RSA_InternalKeyIdx=128;
// 
// 		uiReturn=SENC_KEY_RSAKeyGetPublicKey(pDev,&ea,pubkey,&publen);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_KEY_RSAKeyGetPublicKey code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<endl;
// 			break;
// 		}
// 		uiReturn=SENC_KEY_RSAKeyGenerate(pDev,&ea,iv,16,mac,&maclen,privkey,&privlen,pubkey,&publen);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_KEY_RSAKeyGenerate code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<endl;
// 			break;
// 		}
// 
// 		FILE* fp;
// 		fopen_s(&fp,"811priv.data","wb");
// 		fwrite(privkey,1,privlen,fp);
// 		fclose(fp);
// 		fopen_s(&fp,"811pub.data","wb");
// 		fwrite(pubkey,1,publen,fp);
// 		fclose(fp);
// 		fopen_s(&fp,"811mac.data","wb");
// 		fwrite(mac,1,maclen,fp);
// 		fclose(fp);
// 		uiReturn=SENC_KEY_RSAKeyGenerate(pDev,&ea,iv,16,gmac,&maclen,gpriv,&privlen,gpub,&publen);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_KEY_RSAKeyGenerate code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<endl;
// 			break;
// 		}
// 		uiReturn=SENC_RSA_PubkeyEncryptExternal(pDev,&ea,gpub,publen,data,256,indata,&datalen);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_KEY_RSAKeyGenerate code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<endl;
// 			break;
// 		}
// 		uiReturn=SENC_RSA_PubkeyEncryptInternal(pDev,&ea,data,245,indata,&datalen);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_RSA_PubkeyEncryptInternal code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<endl;
// 			break;
// 		}
// 		cout<<"External started"<<endl;
// 		st=GetTickCount();
// 		while(i++<20000){

// 		uiReturn=SENC_AES_Decrypt(pDev,&ea,NULL,0,gcipher1,16,data,&datalen);
// 		uiReturn=SENC_RSA_PrivkeySignatureExternal(pDev,&ea,giv,16,gmac,16,gpriv,1412,data,16,indata,&retlength);
// 		uiReturn=SENC_RSA_PrivkeyDecryptExternal(pDev,&ea,iv,16,gmac,maclen,gpriv,privlen,indata,datalen,d1,&d1l);
// 		uiReturn=SENC_RSA_PrivkeySignatureInternal(pDev,&ea,data,16,indata,&retlength);
// 			uiReturn=SENC_RSA_PrivkeyDecryptInternal(pDev,&ea,indata,datalen,d1,&d1l);
// 		uiReturn=SENC_RSA_PrivkeySignatureExternal(pDev,&ea,iv,16,mac,16,privkey,1412,data,16,indata,&retlength);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_RSA_PrivkeySignatureExternal code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<endl;
// 			break;
// 		}
// 		uiReturn=SENC_RSA_PubkeyVerifyExternal(pDev,&ea,gpub,512,data,16,indata,retlength);
// 		uiReturn=SENC_RSA_PubkeyVerifyInternal(pDev,&ea,data,16,indata,retlength);
// 		uiReturn=SENC_RSA_PubkeyVerifyExternal(pDev,&ea,pubkey,512,data,16,indata,retlength);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_RSA_PubkeyVerifyExternal code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<endl;
// 			break;
// 		}
// 		}
// 		et=GetTickCount();
// 		cout<<"Total time is "<<(et-st)<<" ms, it costs "<<((et-st)/20000)<<" ms per op"<<endl;
// 		cout<<"TPS is "<<(1000/((et-st)/20000))<<endl;
// 
// 		if(uiReturn!=0) break;
// 
// 		if(memcmp(data,gsigned,256)!=0){
// 			cout<<"Err Data not match! line: "<<dec<<__LINE__<<endl;
// 			break;
// 		}


// 		uiReturn=SENC_Open(dev_list.devs[7],&pDevR);
// 		if(uiReturn!=0){
// 			cout<<"Err Open code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}


// 		unsigned char zeroset[16]={0};
// 		memset(zeroset,'0',16);



// 		uiReturn=SENC_DongleVerify(pDev);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_DongleVerify code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}

// 		ea.RSA_PrikeyEncIdx=64;
// 		ea.RSA_Mode=1;
// 		ea.RSA_PaddingMode=2;
// 		ea.RSA_HashAlgorithm=2;
// 		ea.RSA_PrikeyEncMode=2;
// 		datalen = 256;
// 		data[0]=0;
// 		data[datalen-1]=0;
// 		datalen=16;
// 		unsigned char emptyiv[16]={0};
// 
// 		ppm=Base64Decrypt(mac64,&ml);
// 		ppv=Base64Decrypt(priv64,&vl);
// 		unsigned int ivl,iml,ibl;
// 		unsigned char outpriv[1412]={
// 			0x5c,0x58,0x7e,0x8f,0xaf,0xbf,0xb6,0x9d,0x97,0xb5,0xa1,0x5f,0xb9,0x1b,0x37,0xc2,0xed,0x9e,0x72,0xd5,0xb7,0xc7,0x02,0x0c,0xdf,0x93,0xd2,0xa2,0x6c,0xf1,0x4d,0x52,0x2e,0xac,0xec,0x32,0xd3,0x73,0xaf,0x86,0x4c,0x94,0x4a,0x5c,0xcc,0x6d,0x7c,0x67,0xec,0xfa,0xc9,0xae,0x0b,0x91,0x71,0xa8,0x6a,0x1c,0xcf,0x13,0xc6,0x23,0xa5,0x0b,0xd5,0x84,0x39,0xa0,0x35,0x0a,0xf3,0x37,0x9c,0xbc,0xb0,0x3f,0x3f,0xc0,0x6e,0xe6,0x61,0x45,0xea,0xc9,0x4c,0xa7,0x4f,0x8b,0xab,0x80,0x7e,0xe6,0x7c,0x92,0x65,0x09,0xfd,0xb9,0xd0,0x9d,0x45,0xfb,0x0b,0x6d,0xae,0x77,0x34,0xd4,0x92,0x28,0xa8,0x56,0xde,0x37,0xa3,0x6e,0x9a,0x07,0x01,0x1f,0xd4,0x17,0x4f,0x35,0xbd,0xc3,0x21,0x2d,0xaf,0x0d,0x57,0xe9,0x38,0x7d,0xb5,0x34,0x99,0x8c,0xc8,0x4b,0x53,0x4c,0x2d,0xdf,0x08,0xaf,0x71,0x27,0x83,0xff,0x0c,0x27,0xfd,0x59,0xed,0x0f,0x27,0x6c,0x12,0x4c,0x42,0xb6,0xa4,0x6b,0x63,0x39,0xd1,0x5b,0x47,0x49,0x6b,0x3b,0x97,0x22,0x39,0xb3,0x7e,0x5b,0x1e,0xd7,0x18,0x2a,0x28,0x42,0x87,0xf1,0x01,0x0f,0x06,0x33,0x2f,0x7c,0x78,0xae,0x96,0x58,0x5b,0x81,0x6b,0x2f,0x48,0xd3,0x57,0x27,0xbd,0x5c,0xdd,0x3a,0xdd,0xca,0xf1,0x45,0xde,0xe9,0x88,0x35,0x7e,0x56,0xc0,0x7b,0xbb,0xf4,0x7c,0x43,0xd3,0x6c,0xf6,0x4d,0x11,0x0f,0xc1,0x0d,0x07,0x5f,0x84,0xf4,0x4e,0x9a,0x78,0xe9,0x8d,0x54,0x17,0x62,0x4f,0x0f,0x5d,0x29,0x06,0x4d,0xf1,0x81,0xc9,0x5d,0x79,0x94,0x34,0x8d,0xfd,0x4d,0x25,0x22,0x93,0x2b,0x13,0x67,0xab,0xde,0x81,0x32,0x8a,0xc5,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x32,0x28,0x94,0x81,0x4d,0xa0,0x01,0x89,0x94,0xd4,0xe6,0xfc,0x29,0x91,0xd9,0x36,0x3f,0x27,0x7f,0x4f,0x60,0x3f,0xb8,0x03,0x65,0xf3,0x3e,0x7a,0x8e,0x7f,0x4b,0x63,0xf3,0xf0,0x9d,0x6f,0x9c,0x1d,0xb0,0x90,0xe4,0x14,0x89,0xa1,0xc4,0x38,0x25,0x47,0x65,0x51,0xd3,0xab,0xef,0xe2,0x0f,0xba,0xce,0x03,0x30,0x36,0x28,0xbd,0x9f,0x63,0xdf,0x18,0x05,0x8e,0xa6,0x83,0x3d,0x56,0x95,0x98,0xd6,0x1d,0xeb,0xd5,0x14,0x0f,0x23,0xaa,0x55,0x42,0x89,0xe9,0x9d,0x89,0x68,0x70,0xc6,0x51,0x78,0x46,0xe4,0x31,0x25,0x58,0xd4,0xf9,0xf8,0xd6,0xe5,0xb6,0xc8,0x5d,0xcb,0xdd,0x3b,0xf6,0x53,0xd4,0x04,0x32,0x99,0x84,0x98,0x83,0xd0,0x77,0x5e,0x8f,0x60,0x08,0x58,0x02,0x63,0x26,0x68,0x90,0xb0,0xbe,0x8b,0x62,0xd8,0x15,0x6e,0x35,0x48,0x23,0xea,0x82,0x24,0xeb,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x89,0x50,0x2c,0x19,0x64,0x94,0x60,0xff,0x70,0x5e,0x33,0xe0,0x63,0xf5,0x22,0x8e,0x97,0x22,0xc5,0xc2,0xac,0xd6,0x5c,0x21,0x23,0x85,0x91,0xd2,0x6a,0x79,0xc9,0xeb,0xa5,0xa2,0x20,0xb5,0xeb,0x61,0x39,0x31,0x6e,0x93,0x94,0xb0,0x1b,0xe3,0x5f,0xad,0x0e,0x59,0x96,0xa0,0x8c,0x73,0x7b,0x11,0xc9,0x2e,0x49,0xd7,0x63,0x0b,0xd5,0x21,0x08,0x3c,0x01,0x42,0xa2,0x6e,0x6f,0x3c,0xbe,0x68,0x45,0x5b,0xef,0xdb,0x11,0x14,0xb3,0xb1,0xcc,0xb4,0x92,0xd9,0x6d,0xa3,0x00,0x69,0xc3,0x93,0xcd,0xda,0x68,0xc6,0x6a,0x8c,0xe7,0xc1,0xe5,0x74,0x9c,0x68,0x8d,0x56,0xf9,0x98,0x74,0xf5,0xfe,0xa3,0x48,0xdf,0x6e,0xef,0xd4,0x95,0x35,0xc6,0x38,0xda,0x1f,0x32,0xd5,0x46,0x78,0xc8,0x0e,0x3d,0x7e,0xc7,0x8e,0xda,0xf8,0x35,0xb9,0x5e,0x64,0xa3,0xd3,0xbf,0x7a,0xb4,0xf6,0x80,0xe0,0x14,0xd2,0xdb,0x3d,0x4a,0xaa,0x98,0x61,0x7a,0xf5,0xa5,0x45,0x1e,0xb2,0x15,0x06,0x94,0xe4,0x8f,0xff,0x5d,0x30,0xb0,0x50,0x02,0x7a,0x09,0x7d,0x71,0x60,0x0e,0xba,0x71,0xe9,0x69,0xb0,0x3f,0xeb,0xd6,0xa1,0xf9,0x7f,0xd8,0xe3,0x48,0x0b,0xd3,0xbc,0xf5,0x32,0x9d,0x34,0x41,0xb4,0x0a,0x63,0x4d,0x2c,0x9c,0xdc,0xd8,0x52,0x28,0xd5,0xdd,0x98,0xbe,0xca,0x75,0x28,0x7b,0x9a,0x5b,0x39,0x6c,0x38,0x75,0x40,0xc5,0x4f,0xe4,0x82,0xbf,0xf9,0x3d,0x75,0xa5,0xe4,0xc1,0x7d,0x31,0x7a,0xae,0x09,0xed,0xf8,0xb6,0x1a,0x47,0xb7,0x8f,0xb9,0x9f,0x99,0x06,0x75,0xa7,0xef,0xac,0x42,0x20,0x75,0x50,0x17,0x83,0x59,0x81,0x55,0x76,0x2f,0x79,0x07,0x1b,0x9f,0x71,0x3e,0x73,0x0d,0x69,0x17,0x12,0xa9,0x3e,0xdb,0xf6,0xf2,0xfd,0x29,0x3d,0x7a,0x47,0xc8,0x81,0x54,0x27,0x0d,0x25,0xb7,0xbe,0xfb,0x34,0xe2,0x23,0xdf,0xdc,0x72,0x3f,0xc3,0xed,0xeb,0x74,0x98,0x49,0xbe,0xcc,0x5b,0x11,0x89,0xe9,0xa7,0x7d,0xf5,0xdc,0x59,0x0d,0x7d,0x8b,0x4e,0x61,0x91,0x39,0xf8,0xda,0x05,0x9b,0x95,0x8b,0x54,0xca,0xf2,0xa0,0x42,0xce,0x12,0x55,0xdf,0xf4,0x43,0xe1,0x8a,0x9a,0x76,0x03,0xfa,0x84,0xdf,0x87,0xc3,0x27,0x33,0xa5,0x4d,0x38,0x94,0xfd,0xbb,0x68,0x6b,0x08,0xdb,0xe1,0xb5,0x08,0x98,0x71,0x72,0x35,0xda,0x92,0x3c,0xa0,0x28,0x75,0x3a,0x79,0x22,0x9d,0x51,0x7e,0xb8,0x26,0xef,0x0b,0xcc,0xb5,0xc0,0x1b,0xd8,0x89,0x81,0x14,0x69,0x2e,0x99,0xff,0x79,0x6b,0x76,0x7f,0xb1,0x8b,0x5d,0xaf,0x4a,0x00,0xfd,0x90,0x8d,0xb8,0x3f,0x27,0x7f,0x4f,0x60,0x3f,0xb8,0x03,0x65,0xf3,0x3e,0x7a,0x8e,0x7f,0x4b,0x63,0xf3,0xf0,0x9d,0x6f,0x9c,0x1d,0xb0,0x90,0xe4,0x14,0x89,0xa1,0xc4,0x38,0x25,0x47,0x65,0x51,0xd3,0xab,0xef,0xe2,0x0f,0xba,0xce,0x03,0x30,0x36,0x28,0xbd,0x9f,0x63,0xdf,0x18,0x05,0x8e,0xa6,0x83,0x3d,0x56,0x95,0x98,0xd6,0x1d,0xeb,0xd5,0x14,0x0f,0x23,0xaa,0x55,0x42,0x89,0xe9,0x9d,0x89,0x68,0x70,0xc6,0x51,0x78,0x46,0xe4,0x31,0x25,0x58,0xd4,0xf9,0xf8,0xd6,0xe5,0xb6,0xc8,0x5d,0xcb,0xdd,0x3b,0xf6,0x53,0xd4,0x04,0x32,0x99,0x84,0x98,0x83,0xd0,0x77,0x5e,0x8f,0x60,0x08,0x58,0x02,0x63,0x26,0x20,0xfd,0x6f,0xe0,0x5c,0xcb,0x51,0xab,0x6b,0x59,0x7c,0xa8,0x6c,0x92,0x3f,0x59,0x7c,0x69,0x29,0xd8,0x87,0xa7,0xd1,0x53,0x87,0x2b,0x20,0xe4,0x8e,0xeb,0x87,0x33,0x93,0x32,0xca,0xae,0x73,0x07,0x08,0x9d,0x2d,0x37,0xf0,0x50,0x42,0xa2,0x79,0xe0,0xcc,0x29,0x18,0xff,0xa2,0xdb,0xcf,0xb5,0xdc,0x93,0x96,0x31,0xb9,0x17,0xff,0xc3,0xa4,0xa9,0xc7,0x2f,0xc0,0x04,0xf2,0xb4,0x29,0x92,0x0b,0xf6,0x7c,0xe4,0xaa,0x67,0x70,0x5b,0x47,0xe8,0x8d,0x29,0x71,0xc2,0x57,0xcd,0xc5,0x87,0x7e,0x24,0x8e,0x4a,0xaf,0x9f,0x4d,0x31,0x9f,0xae,0x01,0x1d,0x28,0x45,0xa4,0xb2,0x6d,0xd3,0x09,0x46,0x81,0x6e,0x89,0x73,0x26,0x32,0xbf,0x7b,0x44,0x99,0x76,0x6d,0x48,0xa7,0x62,0x2b,0x3e,0xdc,0x9d,0xcf
// 		};
// 		unsigned char outpub[512]={
// 			0x43,0x1b,0xa7,0x50,0x7a,0xbf,0xd5,0x09,0xe4,0xf5,0x53,0xc5,0x05,0xa8,0x1f,0x98,0xd6,0x9c,0x90,0x35,0xaf,0x80,0x7b,0x91,0x28,0xc1,0x9f,0x5e,0x4b,0x19,0x9f,0xa5,0x99,0x93,0xcf,0xcf,0xd3,0x74,0x64,0xff,0xa8,0x80,0x05,0x1c,0x95,0x13,0x36,0xeb,0x13,0xb0,0x90,0xcf,0xd9,0x46,0x90,0xa5,0x54,0x8a,0xee,0xee,0x00,0x6c,0x85,0xab,0x7b,0x26,0x9e,0x1a,0xc2,0xff,0x5e,0x58,0x3d,0x1c,0xbf,0x8c,0x1b,0x5c,0x23,0x47,0xe1,0xdc,0x0b,0xdc,0x38,0xf2,0xc9,0xa8,0x6b,0xbb,0x74,0xbc,0xf9,0xe8,0x5a,0xf0,0x25,0x06,0xe1,0x74,0x35,0x9d,0xce,0x7f,0xad,0xf5,0xcf,0xf8,0x9e,0x16,0xe1,0xa3,0xc0,0x25,0x7a,0x15,0x31,0x0a,0xe5,0xa7,0xd4,0x93,0x5b,0xbd,0x7e,0x69,0x07,0x6e,0xc4,0x18,0x03,0x09,0x0a,0xbe,0x8e,0xd4,0x5a,0x05,0x5d,0xe1,0xcf,0x15,0xeb,0xba,0xb4,0xfd,0x4a,0x8e,0x66,0xb8,0x1c,0x54,0xae,0xdf,0xeb,0x6b,0x34,0x72,0xa1,0xbc,0xb4,0x60,0x30,0x63,0xe1,0x54,0xb4,0x22,0x55,0x6e,0xd2,0x35,0x52,0x7e,0x00,0x7d,0x5a,0x6b,0x24,0x34,0x9f,0x1b,0x3e,0x41,0x16,0xc9,0x42,0x08,0xc3,0x4b,0xa7,0xfa,0x88,0xc7,0x14,0x63,0xc0,0x40,0x4e,0xde,0x65,0x25,0xd6,0xcb,0xc0,0x9b,0xf1,0xc0,0x0c,0x21,0xd0,0x40,0x38,0x33,0xbf,0xf7,0xd7,0x66,0xb5,0xdd,0x42,0xd5,0xa4,0x0e,0xc0,0x7b,0xb2,0x23,0xe7,0xa4,0x41,0x0f,0x6e,0xa9,0x31,0xa7,0x29,0x46,0xf8,0x8d,0x72,0x7b,0xc4,0x66,0x30,0xcb,0xd7,0xe5,0x1e,0x06,0x48,0xa5,0x1a,0x58,0x62,0x6b,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
// 		};
// 		unsigned char outmac[16]={
// 			0xc1,0x42,0x08,0x63,0x56,0x9a,0xb4,0xf7,0x03,0xdb,0x70,0x00,0xed,0x9e,0x72,0xd5
// 		};

// 
// 
/*
		uiReturn=SENC_KEY_RSAKeyGenerate(pDev,&ea,zeroset,16,mac,&iml,privkey,&ivl,pubkey,&ibl);
		if(uiReturn!=0){
			cout<<"Err SENC_KEY_RSAKeyGenerate code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
			break;
		}

*/
// 		uiReturn=SENC_RSA_PrivkeySignatureExternal(pDev,&ea,zeroset,16,outmac,16,outpriv,1412,data,datalen,d1,&d1l);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_RSA_PrivkeySignatureExternal code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}else{
// 			uiReturn=SENC_RSA_PubkeyVerifyExternal(pDev,&ea,outpub,512,data,datalen,d1,d1l);
// 			if(uiReturn!=0){
// 				cout<<"Err SENC_RSA_PrivkeySignatureExternal code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 				break;
// 			}
// 		}
// 


/*
		FILE *fp;
		fopen_s(&fp,"keyaes128.key","w");

		string tmp = "Privkey:\r\n",key;

// 		fwrite(tmp.c_str(),sizeof(char),tmp.size(),fp);

// 		tmp.empty();

		toMatrix(tmp,1412,privkey);
// 		fwrite(tmp.c_str(),sizeof(char),tmp.size(),fp);

// 		tmp.empty();
		tmp+="Pubkey:\r\n";
		toMatrix(tmp,512,pubkey);
// 		fwrite(tmp.c_str(),sizeof(char),tmp.size(),fp);

// 		tmp.empty();
		tmp+="Mac:\r\n";
		toMatrix(tmp,16,mac);
		fwrite(tmp.c_str(),sizeof(char),tmp.size(),fp);

		fclose(fp);
*/

// 
// 		ppv=privkey;
// 		ppm=mac;
// 
// 		sm3(ppv,vl,sm3mac);
// 
// 		memcmp(sm3mac,ppm,16);



// 		uiReturn=SENC_RSA_PrivkeySignatureExternal(pDev,&ea,emptyiv,16,ppm,16,ppv,ivl,data,datalen,d1,&d1l);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_RSA_PrivkeySignatureExternal code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}
// 
// 		uiReturn=SENC_RSA_PubkeyVerifyExternal(pDev,&ea,pubkey,ibl,data,16,d1,d1l);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_RSA_PubkeyVerifyExternal code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}
// 
// 		uiReturn=SENC_RSA_PrivkeySignatureExternal(pDevR,&ea,emptyiv,16,ppm,16,ppv,ivl,data,datalen,d2,&d2l);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_RSA_PrivkeySignatureExternal code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}
// 
// 		uiReturn=SENC_RSA_PubkeyVerifyExternal(pDevR,&ea,pubkey,ibl,data,16,d2,d2l);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_RSA_PubkeyVerifyExternal code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}



// 
// 		ea.AES_EncIdx=65;
// 		ea.AES_EncLength=2;
// 		ea.AES_EncMode=1;
// 
// 
// 
// 		uiReturn=SENC_AES_Encrypt(pDev,&ea,NULL,NULL,data,256,d1,&d1l);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_AES_Encrypt code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}
// 
// // 		uiReturn=SENC_AES_Encrypt(pDevR,&ea,NULL,NULL,data,256,d2,&d2l);
// // 		if(uiReturn!=0){
// // 			cout<<"Err SENC_AES_Encrypt code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// // 			break;
// // 		}
// // 
// 		uiReturn=SENC_AES_Decrypt(pDevR,&ea,NULL,NULL,d1,d1l,indata,&dd1);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_AES_Encrypt code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}
// 
// // 		uiReturn=SENC_AES_Decrypt(pDevR,&ea,NULL,NULL,d2,d2l,indata2,&dd2);
// // 		if(uiReturn!=0){
// // 			cout<<"Err SENC_AES_Encrypt code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// // 			break;
// // 		}
// // 
// 
// 		if(memcmp(indata,data,256)!=0){
// 			cout<<"Err SENC_AES_Encrypt code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}



// 		ea.RSA_PrikeyEncIdx=rand()%64+1;
// 		ea.RSA_Mode=1;
// 		ea.RSA_PaddingMode=1;
// 		ea.RSA_HashAlgorithm=2;
// 		ea.RSA_PrikeyEncMode=2;
// 		datalen = 256;
// 		data[0]=0;
// 		data[datalen-1]=0;

/*
		ea.RSA_PrikeyEncIdx=1;
		ea.RSA_Mode=1;
		ea.RSA_PrikeyEncMode=3;
		ea.RSA_HashAlgorithm=2;
		ea.RSA_PaddingMode=2;
		int enclen=2016;
 		RandGenerator(iv,16);

		uiReturn=SENC_KEY_RSAKeyGenerate(pDev,&ea,NULL,0,mac,&maclen,privkey,&privlen,pubkey,&publen);
		if(uiReturn!=0){
			cout<<"Err SENC_KEY_RSAKeyGenerate code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
			break;
		}

		uiReturn=SENC_RSA_PubkeyEncryptExternal(pDev,&ea,pubkey,publen,data,245,d1,&d1l);
		if(uiReturn!=0){
			cout<<"Err SENC_RSA_PubkeyEncryptExternal code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
			break;
		}

		uiReturn=SENC_RSA_PrivkeyDecryptExternal(pDev,&ea,NULL,0,mac,16,privkey,1412,d1,d1l,d2,&d2l);
		if(uiReturn!=0){
			cout<<"Err SENC_RSA_PrivkeyDecryptExternal code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
			break;
		}

		if(memcmp(data,d2,245)!=0){
			cout<<"Err RSA E/D data not match, line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
			break;
		}
		
		uiReturn=SENC_RSA_PrivkeySignatureExternal(pDev,&ea,NULL,0,mac,16,privkey,1412,data,1024,d1,&d1l);
		if(uiReturn!=0){
			cout<<"Err SENC_RSA_PrivkeySignatureExternal code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
			break;
		}


		uiReturn=SENC_RSA_PubkeyVerifyExternal(pDev,&ea,pubkey,publen,data,1024,d1,d1l);
		if(uiReturn!=0){
			cout<<"Err SENC_RSA_PrivkeySignatureExternal code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
			break;
		}


*/

		/*
		FILE *fp;

		fopen_s(&fp,"keydata.data","a+b");

		uiReturn=SENC_KEY_RSAKeyGenerate(pDev,&ea,privkey, &privlen,pubkey,&publen);
		if(uiReturn!=0){
			cout<<"Err SENC_KEY_RSAKeyGenerate code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
			break;
		}

		string temp="privkey=";

		sendstr=base64_encode(privkey,1412);
		temp+=sendstr;

		fwrite(temp.data(),sizeof(char),temp.length(),fp);

		temp="\rmac=";
		sendstr=base64_encode(privkey+1412,16);
		temp+=sendstr;

		fwrite(temp.data(),sizeof(char),temp.length(),fp);

		temp="\riv=";
		sendstr=base64_encode(privkey+1412+16,16);
		temp+=sendstr;

		fwrite(temp.data(),sizeof(char),temp.length(),fp);

		temp="\rpubkey=";
		sendstr=base64_encode(pubkey,publen);
		temp+=sendstr;

		fwrite(temp.data(),sizeof(char),temp.length(),fp);


		fclose(fp);
		*/


/*
		uiReturn=SENC_AES_Encrypt(pDev,&ea,NULL, 0,data,enclen,indata,&retlength);
		if(uiReturn!=0){
			cout<<"Err SENC_AES_Encrypt code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
			break;
		}

		uiReturn=SENC_AES_Decrypt(pDev,&ea,NULL, 0,indata,retlength,indata2,&d2l);
		if(uiReturn!=0){
			cout<<"Err SENC_AES_Encrypt code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
			break;
		}

		if(memcmp(data,indata2,enclen)){
			cout<<"Err memcmp, loop: "<<loop<<endl;
			break;
		}

*/



// 		uiReturn=SENC_KEY_RSAKeyGenerate(pDev,&ea,priv,1444,pub,512);;
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_KEY_RSAKeyGenerate code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}
// 
// 
// 		uiReturn=SENC_RSA_PubkeyEncryptExternal(pDev,&ea,pub,512,data,datalen,d1,&retlength);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_RSA_PubkeyEncryptExternal code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}
// 
// 		uiReturn=SENC_RSA_PrivkeyDecryptExternal(pDev,&ea,priv,1444,d1,retlength,d2,&d2l);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_RSA_PrivkeyDecryptExternal code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}
// 
// 		if(memcmp(data,d2,datalen)){
// 			cout<<"Err memcmp, loop: "<<loop<<endl;
// 			break;
// 		}
// 		uiReturn=SENC_RSA_PrivkeySignatureExternal(pDev,&ea,priv,1444,data,datalen,d1,&retlength);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_RSA_SignatureInternal code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}
// 
// 		uiReturn=SENC_RSA_PubkeyVerifyExternal(pDev,&ea,pub,512,data,datalen,d1,retlength);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_RSA_DecryptInternal code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}

// 		uiReturn=SENC_QuitOperateState(pDev);
// 		if(uiReturn!=0){
// 			cout<<"Err SENC_QuitOperateState code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
// 			break;
// 		}



		uiReturn=SENC_Close(pDev);
		if(uiReturn!=0){
			cout<<"Err close code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
			break;
		}

 
		uiReturn=SENC_Free(&pDev);
		if(uiReturn!=0){
			cout<<"Err free code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
			break;
		}


		uiReturn=SENC_FreeDevList(&dev_list);
		if(uiReturn!=0){
			cout<<"Err Free List code:0x"<<hex<<uiReturn<<", line: "<<dec<<__LINE__<<" , loop: "<<loop<<endl;
			break;
		}


	}while(0);
	if(uiReturn!=0){
		cout<<"Test Failed"<<endl;
		cin>>i;
		return (int)uiReturn;
	}

	cout<<"Test Succeeded"<<endl;


	cin>>i;

	return 0;
}

